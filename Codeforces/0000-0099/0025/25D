// problem link: https://codeforces.com/contest/25/problem/D
// Problem Name: D. Roads not only in Berland
// Contest Name: Codeforces Beta Round 25
// Div. 2

// Problem tags: dsu, graphs, trees
// difficulty: *1900

// Solution:

/* <________--BIRAJ01--________> */

#include <bits/stdc++.h>
#include <iostream>

#define lil long long int

#define couty cout << "YES" << endl
#define coutn cout << "NO" << endl
#define cout(a) cout << a << endl

#define min3(a,b,c) (a<b && a<c)?a:(b<c)?b:c
#define max3(a,b,c) (a>b && a>c)?a:(b>c)?b:c

#define fi(i,s,e) for(int i=s;i<e;i++)
#define fd(i,s,e) for(int i=s;i>e;i--)

#define ain(i,arr,n); for(int i=0;i<n;i++){ cin >> arr[i]; }
#define aout(i,arr,n); for(int i=0;i<n;i++){ cout << arr[i] << "\t"; }

using namespace std;

int gcd(int a,int b){
    if(b==0) return a;
    return gcd(b,a%b);  }

const int N = 1e5;
int parent[N];
int Size[N];

void make(int v){
    parent[v]=v;
    Size[v]=1;
}

int find(int v){
    if(v == parent[v]) return v;
    return parent[v]=find(parent[v]);
}

void Union(int a, int b){
    a=find(a);
    b=find(b);
    if(a!=b){
        if(Size[a]<Size[b]) swap(a,b);
        parent[b] = a;
        Size[a]+=Size[b];
    }
}

void solve(){
    int n;
    cin >> n;
    fi(i,1,n+1) make(i);
    vector<pair<int,int>> v;
    vector<int> r;
    fi(i,0,n){
        int x,y;
        cin >> x >> y;
        int a = find(x);
        int b = find(y);
        if(a==b){
            v.push_back({x,y});
        }
        else Union(x,y);
    }
    fi(i,1,n+1){
        if(i==parent[i]) r.push_back(i);
    }
    cout(r.size()-1);
    fi(i,1,r.size()){
        cout << v[i-1].first << " " << v[i-1].second << " " << r[i-1] << " " << r[i] << endl;
    }
}
int main() {
        int t=1;
        while(t--){
            solve();
        }
}