// problem link: https://codeforces.com/contest/20/problem/C
// Problem Name: C. Dijkstra?
// Contest Name: Codeforces Alpha Round 20

// Problem tags: graphs, shortest paths
// difficulty: *1900

// Solution

/* <________--BIRAJ01--________> */

#include <bits/stdc++.h>
#include <iostream>

#define lil long long int

#define couty cout << "YES" << endl
#define coutn cout << "NO" << endl
#define cout(a) cout << a << endl

#define min3(a,b,c) (a<b && a<c)?a:(b<c)?b:c
#define max3(a,b,c) (a>b && a>c)?a:(b>c)?b:c

#define fi(i,s,e) for(int i=s;i<e;i++)
#define fd(i,s,e) for(int i=s;i>e;i--)

#define ain(i,arr,n); for(int i=0;i<n;i++){ cin >> arr[i]; }
#define aout(i,arr,n); for(int i=0;i<n;i++){ cout << arr[i] << "\t"; }

using namespace std;

int gcd(int a,int b){
    if(b==0) return a;
    return gcd(b,a%b);  }

lil n,m;
const lil N = 1e5+10;
const lil INF = 1e14+10;

void solve(){
    cin >> n >> m;
    vector<pair<lil,lil>> g[n+1];
    vector<lil> path(n+1, INF);
    vector<lil> dist(n+1, INF);
    fi(i,0,m){
        lil x,y,w;
        cin >> x >> y >> w;
        g[x].push_back({y,w});
        g[y].push_back({x,w});
    }
    vector<lil> vis(n+1,0);
    lil source=1;
    // path[source];
    dist[source] = 0;
    set<pair<lil,lil>> st;
    st.insert({0,source});
    while(st.size()){
        auto p = *st.begin();
        lil wt = p.first;
        lil ver = p.second;
        st.erase(st.begin());
        if(vis[ver]) continue;
        if(ver==n) break; 
        vis[ver]=1;
        for(auto child: g[ver]){
            lil c_v = child.first;
            lil c_w = child.second;
            // cout(ver << " " << c_v << " " << c_w);
            if(dist[ver]+c_w < dist[c_v]){
                dist[c_v]=dist[ver]+c_w;
                st.insert({dist[c_v], c_v});
                path[c_v] = ver;
            }
        }
    }
    if(path[n]==INF) cout << -1;
    else{
        vector<lil> v;
        v.push_back(n);
        lil x=n;
        while(x!=1){
            x = path[x];
            v.push_back(x);
        }
        reverse(v.begin(), v.end());
        for(auto i: v) cout << i << " "; 
    }
    cout << endl; 
}
int main() {
    int t=1;
    while(t--){
        solve();
    }
}